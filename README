# README

Этот проект включает три Python-скрипта, каждый из которых реализует уникальную функциональность:

---

## 1. **Эмулятор Shell (`1.py`)**

Графический эмулятор командной строки, реализованный с использованием `tkinter`. Эмулятор обрабатывает команды и симулирует файловую систему на основе виртуального файлового пространства, хранящегося в ZIP-архиве.

### Функциональность:
- **Команды**:  
  - `cd <path>`: Переход в директорию.
  - `ls`: Вывод списка файлов в текущей директории.
  - `who`: Отображение текущего пользователя.
  - `chmod <permissions> <file>`: Изменение прав доступа для файла.
  - `tail <file>`: Вывод последних 10 строк файла.
  - `exit`: Выход из эмулятора.
- Виртуальная файловая система загружается из ZIP-архива.
- Логирование команд и результатов в указанный файл.

### Настройка:
1. Создайте файл `config.csv` со следующим содержанием:
   ```
   vfs_zip path/to/your/filesystem.zip
   log_file path/to/logfile.csv
   start_script path/to/startscript
   ```
2. Запустите скрипт:
   ```bash
   python 1.py
   ```

---

## 2. **Парсер конфигурации (`2.py`)**

Этот скрипт анализирует пользовательский формат конфигурации и преобразует его в структурированный XML-подобный вывод.

### Функциональность:
- **Объявление переменных**: Поддерживает скалярные переменные, списки и словари.
- **Оценка выражений**: Динамическое вычисление значений, обернутых в `@{}`.

### Пример входных данных:
```plaintext
var myDict = ([key1:value1,key2:value2]);
var myList = list(value1,value2,value3);
var myScalar = value;
```

### Пример вывода:
```xml
<root>
    <dict name=myDict>
        <key> key1 </key>
        <value> value1 </value>
        <key> key2 </key>
        <value> value2 </value>
    </dict>
    <list name=myList>
        <value> value1 </value>
        <value> value2 </value>
        <value> value3 </value>
    </list>
    <value name=myScalar> value </value>
</root>
```

### Использование:
Запустите скрипт и введите команды конфигурации, разделенные символом `;`.

---

## 3. **Визуализатор графа зависимостей Git (`3.py`)**

Создает граф зависимостей для коммитов в Git-репозитории и визуализирует его в формате PNG с использованием Graphviz.

### Функциональность:
- Составляет список зависимостей коммитов на основе измененных файлов.
- Фильтрует коммиты начиная с указанной даты.
- Генерирует граф в формате PNG.

### Настройка:
1. Установите Graphviz:
   ```bash
   pip install graphviz
   ```
2. Запустите скрипт с аргументами:
   ```bash
   python 3.py --repo-path <путь_к_репозиторию> --output-file <путь_к_выводу> --since-date <ГГГГ-ММ-ДД>
   ```

### Пример:
```bash
python 3.py --repo-path ./my-repo --output-file ./dependency_graph --since-date 2024-01-01
```

### Тестирование:
Для проверки доступны тесты на основе `pytest`. Запустите их командой:
```bash
pytest 3.py
```

---

Каждый скрипт решает определенные задачи: от эмуляции файловой системы до парсинга конфигурации и визуализации Git-репозитория. Настраивайте скрипты под ваши задачи!